
let ids = [
"ybruvapdgixszyckwtfqjonsie",
"mbruvapxghslyyckwtfqjonsie",
"mbruvapdghslzyckwtkujonsie",
"rwruvapdghxlzyckwtfqjcnsie",
"obruvapdgtxlzyckwtfqionsie",
"lbruvapdghxqzyckwtfqjfnsie",
"mbrunapdghxlzyccatfqjonsie",
"mbruvapdghxlzyokltfqjdnsie",
"ybruvapdghxlzmckwtfqjmnsie",
"mbruwaadghxdzyckwtfqjonsie",
"muruvapdghxlzyckvtfqjonsim",
"mbruvapdghxlkyckwtxqjonjie",
"mbruvaqdghxlzyckwtfqjrnnie",
"mwruvapdghdlzyckttfqjonsie",
"mbruvapdgtelzyckwxfqjonsie",
"mbruvapdohxlzvckwtfqjonhie",
"mbrugapdgbxlzyckwtfqjynsie",
"mbruvapdghxlzyckwtlqjonjiu",
"mbruvapwghxlzyckwafqjonbie",
"wbruvapdghxlhyckwtfqjonsii",
"mbruvapdghxlzyckwtcqnonsiq",
"mbyuvapighxlzybkwtfqjonsie",
"mbrrvapdghxvzyckwtfqjonsio",
"mhruvapdghrlzyckwtfzjonsie",
"mtruvapvghxlzyckwtfnjonsie",
"mmrlhapdghxlzyckwtfqjonsie",
"mbruvapdgpxlzyjkwtfqjovsie",
"mbrucapdghxlzymkwtzqjonsie",
"mbeuvafdghxlzyckwtfqjonwie",
"mbruvapcghxlayckwtfqjonsii",
"mbruvabdghxlzyckwtfqyansie",
"mbruvjpdghxlzyckwtfqgfnsie",
"lbruvapdghxlzyckwtfqjonriv",
"mbrupapdghxlzycjwtfqronsie",
"mbpuvapdthxlzymkwtfqjonsie",
"mbiuvapdgixlzyckwxfqjonsie",
"mbruvapdghxyzyckwtfcjonsbe",
"mbrurapkghxlzyckwtfqjonzie",
"mbrufapdrhxlzyciwtfqjonsie",
"mbruvapdghxlzbckwtfqjoisae",
"ubruhapdghxlzuckwtfqjonsie",
"mbruvapdjhulzyckwtfqjonshe",
"mbruwapdgyxlzyckntfqjonsie",
"mwruvapdghplzyckwtfqjonsme",
"mbruvapjghtlzyckwtfqgonsie",
"pbruvapdghhlzyckwtfrjonsie",
"mbruvgpdihxqzyckwtfqjonsie",
"mbruvahdohxlzyckwtfijonsie",
"ibuuvapdghxlzyckwtfqjofsie",
"mbruvandghxlzyckwtfqjrnxie",
"mbrjvlpdghxlzyckwgfqjonsie",
"mbruvapogfxlzyckotfqjonsie",
"mbruvrpdghxlzyckutfejonsie",
"mbruvbpdghxlzyhkwtfqjonsip",
"mbruvapdghxlzyckmnfqjensie",
"mbruvapdghvlzyckwtfqjowsix",
"mbruvakdgholzwckwtfqjonsie",
"mbruvapdghxlzackwtfqconsae",
"mbruvapdghxlzyqvwtfqjlnsie",
"mprrvapdgfxlzyckwtfqjonsie",
"mbrunacdghxlhyckwtfqjonsie",
"obruvapdgsxlzyckwtfqjonvie",
"murcvapdghslzyckwtfqjonsie",
"mbruvapdghxlzyzkwmftjonsie",
"mbrwvapdgtvlzyckwtfqjonsie",
"mbxuvapdghxlzqcnwtfqjonsie",
"mbruvaddghxboyckwtfqjonsie",
"mhruvwndghxlzyckwtfqjonsie",
"mbrdvapdghxlzyckwmpqjonsie",
"mbruvapdgyxlzyckizfqjonsie",
"mbruvapdghxlzlckwtfqeowsie",
"mbruvbpdgrxlzyckwtfqjonsxe",
"mbruqapoghxlzyckwtvqjonsie",
"mbouhapdghmlzyckwtfqjonsie",
"mbruvapjghxidyckwtfqjonsie",
"mbsuvapkghxlkyckwtfqjonsie",
"mbruvlpdghxlzycrwtfqjonsis",
"mcrueapdghxlzyckwtfqjynsie",
"muruvapngbxlzyckwtfqjonsie",
"mbruvapdghxlzycawtfyjojsie",
"mbruvbpdghxczyjkwtfqjonsie",
"ybduvapdghxnzyckwtfqjonsie",
"mbruvbpdghxlzyckwtfbjousie",
"mbouvapdghxlzycbwtfqponsie",
"mbruvaedghplzycgwtfqjonsie",
"mbrhvapdghxlzyckytfqjgnsie",
"mbruvapdqbxleyckwtfqjonsie",
"mbruvapddhhldyckwtfqjonsie",
"mbruvapdghxlwrckwtfqjondie",
"mbruvapdmhxlzyckwtfqkonsve",
"xbbuvapdghxlzyckwtfkjonsie",
"mbruvapdghxlzyckwcfqjunkie",
"mbruvapdghxlzyckwtfqxonfib",
"mbrtvapkghxlzyckwtfqeonsie",
"mbruvazdghxldymkwtfqjonsie",
"kbruvapddhxlzfckwtfqjonsie",
"mbouvapdghxlpyckwtfqjoosie",
"mbauvapdghxlzyckwtfqjszsie",
"mbruvapdghtlzyckntfqtonsie",
"mbruvipdggxlzbckwtfqjonsie",
"mbruqapdghrlzyckwtfqjznsie",
"myruvacdghxlzyckwifqjonsie",
"mbruvapdghxlzuckwtfkjocsie",
"mwjuvapdghxlzyckwtfqjonsxe",
"mbruvapxghxlzickwtfqjobsie",
"mbrupapdghxtlyckwtfqjonsie",
"meruvapdjjxlzyckwtfqjonsie",
"mbruvkodghxlzyckwofqjonsie",
"mbruvapdgexlzyckwtgkjonsie",
"mbruvapwghxlzyckwtcqjonsiw",
"mbruvapdghxlzykkwtfqtoxsie",
"mbruvapdahxlzycgwtfwjonsie",
"mbruvapdgwxlhyckhtfqjonsie",
"mbruvapbghxlzycbhmfqjonsie",
"mbruvapdghxvzyzkwtfqjonsin",
"mbrcvapdqhxlzyckwyfqjonsie",
"zbruvaxdghxlzyckwgfqjonsie",
"mtruvapdghxlilckwtfqjonsie",
"bbruvapdghxlzyckwtfmjonsxe",
"mbruvajdghxlzyckwtfqfwnsie",
"mbruvapdgkxlzyckwtfqionpie",
"rbruvapdghxlryckwdfqjonsie",
"mbruvandghxlzyckwmfvjonsie",
"mbruvahdghxlzeckwtfqjonsme",
"mbruvnpcghxlzyckwtfqjobsie",
"mbruvapdghqlzyckwtfbjonsiy",
"mbruvavdghxlzyckwufqjodsie",
"mbruvapdghxlzyckwtfzmovsie",
"mbruvlpdghxuzyckwtfqjoesie",
"mbruvopdghxlzycwwtfqjansie",
"obruvapdghglzybkwtfqjonsie",
"mbpuvlpdghxlcyckwtfqjonsie",
"mbruvaidghxlzyckwtfmjonoie",
"mbruvapdihxzzyckwtfqjonsiy",
"mbquvapdghxlzyckwtfqconsme",
"mbruvapdghslzyckqtfqjojsie",
"mbrzdapdghxmzyckwtfqjonsie",
"mwruvapdghxozyckwtfqjonsxe",
"muruvapdgfxlzyckwtfqjojsie",
"wtruvapdghxlzyckvtfqjonsie",
"mbruvapdghxlzyckysfqjxnsie",
"mbruvrpdghxczyckktfqjonsie",
"mbquvapdghxlryckwtfqjonsne",
"mbruvapdghflzycvwtfqjpnsie",
"mbruvapughclzyckwtfqjonsin",
"mbrhvapdghxlpyckwtfqjonsre",
"mbruvapdgtxlzyckwtfqjoosit",
"mbrupapnghxhzyckwtfqjonsie",
"mmvuvapdvhxlzyckwtfqjonsie",
"mbruvaptghxlzyckwtfqjotsse",
"mgruvapvghxlzyckwtfqjonsix",
"mbrupapdghxszyckwtfqjunsie",
"mbruvkpdghelzyckwtfqjpnsie",
"mbruvrrdghjlzyckwtfqjonsie",
"mbruvapdghnlzyckwtfkjonsze",
"mbruvwpdghxlzyckwtfqhoysie",
"mbrsvapdfhxlzyckwtfqjobsie",
"mbruvapdgexezymkwtfqjonsie",
"ybruvapdghxlzyckwtfqxonsiw",
"mrruvapdghxdzyckwtfqjossie",
"mbruvapdghtlzyckwtfqconsiu",
"mbrpvapdghxlzlckwpfqjonsie",
"mbruvjpdghslzyckwtfqjjnsie",
"mhruvapoghxlzyckwtfvjonsie",
"mbrubqpdghvlzyckwtfqjonsie",
"mbruvapdghxlzackwtfqconsiw",
"mbruvapdgnxlzkckwtfqjdnsie",
"mbrudapgghelzyckwtfqjonsie",
"mbruvapdghxlzlakwbfqjonsie",
"mbpuvapdghxlzyckwtuqjonjie",
"abruvapdghxlzykkwtfqjonzie",
"mbrupupdghxlsyckwtfqjonsie",
"mbrsvupdghxlzyckwtfqjonkie",
"mxruvgpdghxllyckwtfqjonsie",
"mbrnvapdghxlzycbwtfqfonsie",
"mbrbxapdghxlzyckttfqjonsie",
"mbnuvapdghxlzyxkwtmqjonsie",
"mbrfvapdghjlzickwtfqjonsie",
"mbhuvupdghxlzyxkwtfqjonsie",
"mbrcvapdghxluyckwtfqjznsie",
"mbruvapdghxlzyckwofqjoxsiz",
"mbrevapdghxloyckwtfqjonnie",
"mbruvipdghnlzyckwtfqjopsie",
"mbxxvaptghxlzyckwtfqjonsie",
"mbruvcpdghxlztckwtjqjonsie",
"mqruvlpdghxlzyckotfqjonsie",
"mbruvapdgqxlzyckwtfqjpvsie",
"mbruvapdgvxlzyjkwtfqjbnsie",
"mbruvapdghxlgyckwtfqcocsie",
"mbruvapdghxkwyckwtfqjoqsie",
"mbrgvavdghxlzyckwxfqjonsie",
"qbruqapdgvxlzyckwtfqjonsie",
"mbauvapdghxlzgckwtfqjunsie",
"mbruvapdgdxluyckwtfqjoosie",
"mbruvapdghxlzykkwtfqwobsie",
"mbruvapdghxlzhcnwtfqjonqie",
"mbruvapdghxlzycbhmfqjonsie",
"mbruvapdghxluyczwtfqjontie",
"mbruvapnghxlzyckwnfqjonbie",
"moruvapdghxlzcckwtfqponsie",
"mbruvapfgxxlzyckwtfqjunsie",
"mbruvapdghxlryckvtfejonsie",
"mbrzvapdghxlzvcbwtfqjonsie",
"mbruvapdgqxlzyckwcfqjonsce",
"abruvupdrhxlzyckwtfqjonsie",
"mbrubaptghxlzyckwtfqjondie",
"mgruvapdgpxlzyckwtfijonsie",
"mbruvapdghxczlckwtfujonsie",
"mbruvapdgmmlzyckwtfqjonsir",
"mbruvapdhhxltyckwtfdjonsie",
"mbruvapdghxlzyckwtfdjjnste",
"mbrdvzpdghxlcyckwtfqjonsie",
"mbruvapdghxlzyckwtnqbonsim",
"mbrovapdghxlzyckwtfpjousie",
"mymuvapdghxlzyjkwtfqjonsie",
"mbpuvapdghxlzyckwtfljcnsie",
"mbrxvapdghxlzyclwtfqjonpie",
"mbrueapdghxlzyckwtfqjopsia",
"mbruvapdghxlzycdwtfqjbfsie",
"tbruvavdghxlzyckwtmqjonsie",
"mbduvapdghxlzyckwrfqjrnsie",
"mkrsvapughxlzyckwtfqjonsie",
"mbruvapdghylzyckwtfqtolsie",
"mgruvapdglxldyckwtfqjonsie",
"mbrunapdghclzyckwtfqjonsiy",
"mbruvapdgrxlxyckwtfgjonsie",
"mbruvapdghxpzbckftfqjonsie",
"mbruvcpdghxyzyckotfqjonsie",
"mbruvapdghxlsyckwtfqcqnsie",
"mbruvapdghxlzzckwtfqjonskf",
"mbruvppdghxlzfckwtfqjgnsie",
"mbhuvapdghxlzytkwtfqjonoie",
"mbruvapdghxlzvrkwtfqjjnsie",
"mbmuvapdghxuzyckwtfqjonsze",
"mbruvapdghnlzycnwtfqjonsil",
"mbruvapdgholzyckitfqjonsia",
"mbruxapdghxlmyckwtfqbonsie",
"mbauvapdgholzyckwtfqjolsie",
"mbruvapdghxlzyckwtfqjotslq",
"dbrutapdghxlzyckwtfqjonsiv",
"mbruvapdzhxlyyckwtfbjonsie",
"mmruaapsghxlzyckwtfqjonsie",
"mbruvaldgqxqzyckwtfqjonsie",
"mbruvaodghxdzyjkwtfqjonsie",
"mbrcmatdghxlzyckwtfqjonsie",
"mbrqvapdgtxlzycewtfqjonsie",
"mjruvapdghzlzyckwtfqjonrie",
"mbruvapdghxopcckwtfqjonsie",
"mbruvapdghxszycwwtfqjoqsie",
"mbruvapdgoxezyckwtjqjonsie"
]

function countLetters(str) {
    let obj = {}
    let letters = str.split("")
    letters.forEach(l =>{
        Object.keys(obj).includes(l) ? obj[l]++ : obj[l] = 1
    })
    return obj
}

function checksum() {
    let two = 0
    let three = 0
    ids.forEach(id => {
        let count = countLetters(id)
        if(Object.values(count).includes(2)) two++
        if(Object.values(count).includes(3)) three++
    })
    return two * three
}

function findNeighbours(arr){
    console.log(arr[0])
    arr.sort()
    for(let i = 0; i < arr.length - 1; i++){
        if(arr[i] == arr[i+1]) return arr[i]
    }
}

function findAlmostDupes(){
    for(let i = 0; i < ids[0].length; i++){
        let withOneMissing = ids.map(word => {
            word = word.split("")
            word.splice(i, 1)
            return word.join("")
        })
        console.log(ids[0], withOneMissing[0])
        let match = findNeighbours(withOneMissing)
        if(match) return match
    }
}

// console.log(checksum())

// console.log(matchingLetters("hello", "hlleo"))
console.log("end", findAlmostDupes())
